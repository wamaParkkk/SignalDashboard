@page

@model SignalDashboard.Pages.IndexModel
@{
    ViewData["Title"] = "Dashboard";
}

<h2>Equipment Signal Dashboard</h2>
<!-- 검색 영역 -->
<div>
    <label>Type: <input type="text" id="filterType" oninput="applyFilters()" /></label>
    <label>LineCode: <input type="text" id="filterLineCode" oninput="applyFilters()" /></label>
    <label>Asset: <input type="text" id="filterAsset" oninput="applyFilters()" /></label>
</div>
<!-- 데이터 테이블 -->
<table class="table" id="signalTable">
    <thead>
        <tr>
            <th>Type</th>
            <th>LineCode</th>
            <th>Asset</th>
            <th>Alarm</th>
            <th>Idle</th>
            <th>Run</th>
            <th>SignalSpare</th>
            <th>Remarks1</th>
            <th>Remarks2</th>
            <th>UpdatedAt</th>
        </tr>
    </thead>
    <tbody id="tableBody">
        @foreach (var item in Model.SignalList)
        {
            <tr>
                <td>@item.Type</td>
                <td>@item.LineCode</td>
                <td>@item.Asset</td>
                <td class="@GetSignalClass(item.SignalRed, "red")">@GetSignalText(item.SignalRed)</td>
                <td class="@GetSignalClass(item.SignalYellow, "yellow")">@GetSignalText(item.SignalYellow)</td>
                <td class="@GetSignalClass(item.SignalGreen, "green")">@GetSignalText(item.SignalGreen)</td>
                <td class="@GetSignalClass(item.SignalSpare, "spare")">@GetSignalText(item.SignalSpare)</td>
                <td>@item.Remarks1</td>
                <td>@item.Remarks2</td>
                <td>@item.UpdatedAt</td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    <script>
        // 필터 적용
        function applyFilters() {
            const type = document.getElementById("filterType").value.toLowerCase();
            const lineCode = document.getElementById("filterLineCode").value.toLowerCase();
            const asset = document.getElementById("filterAsset").value.toLowerCase();
            const rows = document.querySelectorAll("#signalTable tbody tr");
            rows.forEach(row => {
                const [colType, colLine, colAsset] = row.querySelectorAll("td");
                const match =
                    colType.textContent.toLowerCase().includes(type) &&
                    colLine.textContent.toLowerCase().includes(lineCode) &&
                    colAsset.textContent.toLowerCase().includes(asset);
                row.style.display = match ? "" : "none";
            });
        }

        // 자동 새로고침
        setInterval(() => {
            fetch("@Url.Page("Index")")
                .then(res => res.text())
                .then(html => {
                    const temp = document.createElement("div");
                    temp.innerHTML = html;
                    const newBody = temp.querySelector("#tableBody").innerHTML;
                    document.getElementById("tableBody").innerHTML = newBody;
                    applyFilters(); // 필터 유지
                });
        }, 5000);   // 5초마다 갱신
    </script>
}

@functions {
    string GetSignalText(int value) => value == 1 ? "On" : "Off";
    string GetSignalClass(int value, string signalType)
    {
        if (value != 1) return ""; // Off일 땐 기본
        return signalType switch
        {
            "red" => "red-blink",
            "yellow" => "yellow-bg",
            "green" => "green-blink",
            "spare" => "silver-bg",
            _ => ""
        };
    }
}